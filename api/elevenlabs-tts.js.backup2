export default async function handler(req, res) {
  if (req.method !== 'POST') {
    res.status(405).json({ error: 'Method not allowed' });
    return;
  }

  try {
    const { text, voice_id, model_id, voice_settings } = req.body || {};
    
    // Validate required fields
    if (!process.env.ELEVENLABS_API_KEY) {
      console.error('Missing ELEVENLABS_API_KEY');
      res.status(500).json({ error: 'Missing ELEVENLABS_API_KEY' });
      return;
    }
    
    if (!text) {
      console.error('Missing text parameter');
      res.status(400).json({ error: 'Missing text parameter' });
      return;
    }

    // Use provided voice_id or default
    const finalVoiceId = voice_id || process.env.ELEVENLABS_DEFAULT_VOICE_ID || '21m00Tcm4TlvDq8ikWAM';
    const finalModelId = model_id || 'eleven_multilingual_v2';
    
    // Enhanced voice settings with better defaults
    const finalVoiceSettings = {
      stability: voice_settings?.stability ?? 0.35,
      similarity_boost: voice_settings?.similarity_boost ?? 0.9,
      style: voice_settings?.style ?? 0.4,
      use_speaker_boost: voice_settings?.use_speaker_boost ?? true
    };

    console.log('üé§ TTS Request:', {
      voiceId: finalVoiceId,
      modelId: finalModelId,
      textLength: text.length,
      voiceSettings: finalVoiceSettings
    });

    // Make request to ElevenLabs API
    const response = await fetch(`https://api.elevenlabs.io/v1/text-to-speech/${finalVoiceId}`, {
      method: 'POST',
      headers: {
        'xi-api-key': process.env.ELEVENLABS_API_KEY,
        'Content-Type': 'application/json',
        'Accept': 'audio/mpeg'
      },
      body: JSON.stringify({
        text,
        model_id: finalModelId,
        voice_settings: finalVoiceSettings
      })
    });

    console.log('üì° ElevenLabs response status:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå ElevenLabs API error:', response.status, errorText);
      res.status(response.status).send(errorText);
      return;
    }

    // Get audio data
    const arrayBuffer = await response.arrayBuffer();
    const buffer = Buffer.from(arrayBuffer);
    
    console.log('‚úÖ Generated audio:', buffer.length, 'bytes');

    // Set response headers
    res.setHeader('Content-Type', 'audio/mpeg');
    res.setHeader('Cache-Control', 'no-store');
    res.setHeader('Content-Length', buffer.length);
    
    // Send audio data
    res.status(200).send(buffer);
    
  } catch (err) {
    console.error('üí• ElevenLabs proxy error:', err);
    res.status(500).json({ 
      error: 'ElevenLabs proxy error', 
      details: String(err),
      timestamp: new Date().toISOString()
    });
  }
}
